{"version":3,"sources":["App.module.css","components/graphArea.module.css","metadata.js","components/menuField.js","components/bottomMenuField.js","App.js","reportWebVitals.js","index.js","components/menuField.module.css","components/bottomMenuField.module.css"],"names":["module","exports","prefectures","MenuField","props","className","classes","field","column","columnTitle","type","name","value","checked","isZenkoku","onChange","onIsZenkokuChange","selectPref","map","pref","i","prefCheckbox","isPrefsPolygon","e","tmp","target","setIsPrefsPolygon","sliderRef","createRef","BottomMenuField","useState","isPlaying","setIsPlaying","intervalID","setIntervalID","bottomMenuField","Slider","slider","ref","original_index","defaultValue","ValueLabelComponent","prop","date","children","open","enterTouchDelay","placement","title","valueLabelDisplay","step","marks","min","max","v","onSliderChange","ButtonGroup","group","Button","variant","button","startIcon","icon","style","borderColor","onClick","length","index","setInterval","clearInterval","dataPlaying","date_length","loadDayData","a","fetch","headers","Accept","then","res","json","resJson","jsonData","Object","keys","loadPrefPolygon","features","App","perDayData","setPerDayData","prefPolygon","setPrefPolygon","yyyymmdd","setYYYYMMDD","dateArray","setDateArray","longitude","latitude","zoom","pitch","viewState","isDisplayPolygon","setIsDisplayPolygon","isDisplayArc","setIsDisplayArc","setIsZenkoku","Array","fill","isZenkokuArc","setIsZenkokuArc","isPrefsArc","setIsPrefsArc","geoLayer","GeoJsonLayer","id","data","wireframe","filled","stroked","opacity","pickable","extruded","lineWidthScale","lineWidthMinPixels","getFillColor","f","indexOf","properties","getRadius","getLineWidth","getLineColor","getElevation","updateTriggers","useEffect","dayData","dayArray","console","log","polygonData","fetchData","header","detail","href","update","mapContainer","layers","initialViewState","controller","mapboxApiAccessToken","mapStyle","setIsDisplayPlygon","isDiplayArc","onIsZenkokuArcChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce452429.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"header\":\"App_header__3ZZ1n\",\"detail\":\"App_detail__3BK-U\",\"title\":\"App_title__-GfWs\",\"update\":\"App_update__m5NWp\",\"mapContainer\":\"App_mapContainer__3SUeY\",\"slider\":\"App_slider__2X9cc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphArea\":\"graphArea_graphArea__2agVU\",\"graph\":\"graphArea_graph__1iHG2\"};","export const prefectures = [\n  \"北海道\",\n  \"青森県\",\n  \"岩手県\",\n  \"宮城県\",\n  \"秋田県\",\n  \"山形県\",\n  \"福島県\",\n  \"茨城県\",\n  \"栃木県\",\n  \"群馬県\",\n  \"埼玉県\",\n  \"千葉県\",\n  \"東京都\",\n  \"神奈川県\",\n  \"新潟県\",\n  \"富山県\",\n  \"石川県\",\n  \"福井県\",\n  \"山梨県\",\n  \"長野県\",\n  \"岐阜県\",\n  \"静岡県\",\n  \"愛知県\",\n  \"三重県\",\n  \"滋賀県\",\n  \"京都府\",\n  \"大阪府\",\n  \"兵庫県\",\n  \"奈良県\",\n  \"和歌山県\",\n  \"鳥取県\",\n  \"島根県\",\n  \"岡山県\",\n  \"広島県\",\n  \"山口県\",\n  \"徳島県\",\n  \"香川県\",\n  \"愛媛県\",\n  \"高知県\",\n  \"福岡県\",\n  \"佐賀県\",\n  \"長崎県\",\n  \"熊本県\",\n  \"大分県\",\n  \"宮崎県\",\n  \"鹿児島県\",\n  \"沖縄県\",\n];\n","import classes from \"./menuField.module.css\";\nimport { prefectures } from \"../metadata\";\n\nexport function MenuField(props) {\n  return (\n    <div className={classes.field}>\n      <div className={classes.column}>\n        <div className={classes.columnTitle}>Polygon Layer</div>\n        {/*<label className={classes.checkIsDisplaying}>\n          <input\n            type=\"checkbox\"\n            name=\"color1\"\n            value=\"red\"\n            checked={props.isDiplayPolygon}\n            onChange={(e) => props.setIsDisplayPolygon(!e.target.checked)}\n          />\n          {\"非表示\"}\n  </label>*/}\n        <div className={classes.column}>\n          <div>表示データ</div>\n          <form>\n            <select>\n              <option>1日の陽性者数</option>\n            </select>\n          </form>\n        </div>\n        <div className={classes.column}>\n          <form>\n            <select>\n              <option>当日</option>\n              {/*<option>前日</option>\n              <option>前週</option>*/}\n            </select>\n          </form>\n        </div>\n        <div>表示範囲</div>\n        <form>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"color1\"\n              value=\"polygon\"\n              checked={props.isZenkoku}\n              onChange={() => {\n                if (!props.isZenkoku) {\n                  props.onIsZenkokuChange(true);\n                }\n              }}\n            />\n            {\"全国\"}\n          </label>\n          <br />\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"color1\"\n              value=\"polygon\"\n              checked={!props.isZenkoku}\n              onChange={() => {\n                if (props.isZenkoku) {\n                  props.onIsZenkokuChange(false);\n                }\n              }}\n            />\n            {\"都道府県別\"}\n          </label>\n        </form>\n        <div className={classes.selectPref}>\n          <form>\n            <tbody>\n              {prefectures.map((pref, i) => {\n                if (i % 3 === 2) {\n                  return (\n                    <tr>\n                      <td>\n                        <label className={classes.prefCheckbox}>\n                          <input\n                            type=\"checkbox\"\n                            name=\"pref\"\n                            value={pref}\n                            key={pref + \"-polygon\"}\n                            checked={props.isPrefsPolygon[i - 2]}\n                            onChange={(e) => {\n                              const tmp = props.isPrefsPolygon.map((i) => {\n                                return i;\n                              });\n                              tmp[i - 2] = e.target.checked;\n                              props.setIsPrefsPolygon(tmp);\n                            }}\n                          />\n                          {prefectures[i - 2]}\n                        </label>\n                      </td>\n                      <td>\n                        <label className={classes.prefCheckbox}>\n                          <input\n                            type=\"checkbox\"\n                            name=\"pref\"\n                            value={pref}\n                            key={pref + \"-polygon\"}\n                            checked={props.isPrefsPolygon[i - 1]}\n                            onChange={(e) => {\n                              const tmp = props.isPrefsPolygon.map((i) => {\n                                return i;\n                              });\n                              tmp[i - 1] = e.target.checked;\n                              props.setIsPrefsPolygon(tmp);\n                            }}\n                          />\n                          {prefectures[i - 1]}\n                        </label>\n                      </td>\n                      <td>\n                        <label className={classes.prefCheckbox}>\n                          <input\n                            type=\"checkbox\"\n                            name=\"pref\"\n                            value={pref}\n                            key={pref + \"-polygon\"}\n                            checked={props.isPrefsPolygon[i]}\n                            onChange={(e) => {\n                              const tmp = props.isPrefsPolygon.map((i) => {\n                                return i;\n                              });\n                              tmp[i] = e.target.checked;\n                              props.setIsPrefsPolygon(tmp);\n                            }}\n                          />\n                          {pref}\n                        </label>\n                      </td>\n                    </tr>\n                  );\n                }\n                return <div></div>;\n              })}\n              <tr>\n                <td>\n                  <label className={classes.prefCheckbox}>\n                    <input\n                      type=\"checkbox\"\n                      name=\"pref\"\n                      value={prefectures[45]}\n                      key={prefectures[45] + \"-polygon\"}\n                      checked={props.isPrefsPolygon[45]}\n                      onChange={(e) => {\n                        const tmp = props.isPrefsPolygon.map((i) => {\n                          return i;\n                        });\n                        tmp[45] = e.target.checked;\n                        props.setIsPrefsPolygon(tmp);\n                      }}\n                    />\n                    {prefectures[45]}\n                  </label>\n                </td>\n                <td>\n                  <label className={classes.prefCheckbox}>\n                    <input\n                      type=\"checkbox\"\n                      name=\"pref\"\n                      value={prefectures[46]}\n                      key={prefectures[46] + \"-polygon\"}\n                      checked={props.isPrefsPolygon[46]}\n                      onChange={(e) => {\n                        const tmp = props.isPrefsPolygon.map((i) => {\n                          return i;\n                        });\n                        tmp[46] = e.target.checked;\n                        props.setIsPrefsPolygon(tmp);\n                      }}\n                    />\n                    {prefectures[46]}\n                  </label>\n                </td>\n              </tr>\n            </tbody>\n          </form>\n        </div>\n      </div>\n      {/*<div className={classes.column}>\n        <div className={classes.columnTitle}>Arc Layer</div>\n        <label className={classes.checkIsDisplaying}>\n          <input\n            type=\"checkbox\"\n            name=\"color1\"\n            value=\"red\"\n            checked={!props.isDiplayArc}\n            onChange={(e) => props.setIsDisplayArc(!e.target.checked)}\n          />\n          {\"非表示\"}\n        </label>\n        <div className={classes.column}>\n          <div>表示データ</div>\n          <form>\n            <select>\n              <option>1日の陽性者数</option>\n              <option>1日の10万人あたり陽性者数</option>\n              <option>1日の死亡者数</option>\n              <option>1日の10万人あたり死亡者数</option>\n            </select>\n          </form>\n        </div>\n        <div className={classes.column}>\n          <div>比較先</div>\n          <form>\n            <select>\n              <option>当日</option>\n              <option>前日</option>\n              <option>前週</option>\n            </select>\n          </form>\n        </div>\n        <div>表示範囲</div>\n        <form>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"color1\"\n              value=\"red\"\n              checked={props.isZenkokuArc}\n              onChange={() => {\n                if (!props.isZenkokuArc) {\n                  props.onIsZenkokuArcChange(true);\n                }\n              }}\n            />\n            {\"全国\"}\n          </label>\n          <br />\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"color1\"\n              value=\"red\"\n              checked={!props.isZenkokuArc}\n              onChange={() => {\n                if (props.isZenkokuArc) {\n                  props.onIsZenkokuArcChange(false);\n                }\n              }}\n            />\n            {\"都道府県別\"}\n          </label>\n        </form>\n        <div className={classes.selectPref}>\n          <form>\n            {prefectures.map((pref, i) => {\n              return (\n                <label className={classes.prefCheckbox}>\n                  <input\n                    type=\"checkbox\"\n                    name=\"pref\"\n                    value={pref}\n                    key={pref + \"-arc\"}\n                    checked={props.isPrefsArc[i]}\n                    onChange={(e) => {\n                      const tmp = props.isPrefsArc.map((i) => {\n                        return i;\n                      });\n                      tmp[i] = e.target.checked;\n                      props.setIsPrefsArc(tmp);\n                    }}\n                  />\n                  {pref}\n                </label>\n              );\n            })}\n          </form>\n          </div>\n      </div>*/}\n    </div>\n  );\n}\n","import classes from \"./bottomMenuField.module.css\";\nimport { Slider, Tooltip, ButtonGroup, Button } from \"@material-ui/core\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport { useState, createRef } from \"react\";\n\nconst sliderRef = createRef(null);\n\nexport function BottomMenuField(props) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [intervalID, setIntervalID] = useState(0);\n\n  return (\n    <div className={classes.bottomMenuField}>\n      <Slider\n        className={classes.slider}\n        ref={sliderRef}\n        value={props.original_index}\n        defaultValue={props.defaultValue}\n        ValueLabelComponent={(prop) => ValueLabelComponent(prop, props.date)}\n        valueLabelDisplay=\"on\"\n        step={1}\n        marks\n        min={0}\n        max={props.defaultValue}\n        onChange={(e, v) => props.onSliderChange(v)}\n      />\n      <ButtonGroup className={classes.group}>\n        <Button\n          variant=\"outlined\"\n          className={classes.button}\n          startIcon={<PlayArrowIcon className={classes.icon} />}\n          style={{ borderColor: \"darkturquoise\" }}\n          onClick={() => {\n            if (!isPlaying) {\n              setIntervalID(\n                dataPlaying(\n                  props.onSliderChange,\n                  props.original_index,\n                  props.date_length\n                )\n              );\n              setIsPlaying(true)\n            }\n          }}\n        />\n        <Button\n          variant=\"outlined\"\n          className={classes.button}\n          startIcon={<PauseIcon className={classes.icon} />}\n          style={{ borderColor: \"darkturquoise\" }}\n          onClick={() => {\n            clearInterval(intervalID);\n            setIsPlaying(false)\n          }}\n        />\n        <Button\n          variant=\"outlined\"\n          className={classes.button}\n          startIcon={<SkipPreviousIcon className={classes.icon} />}\n          style={{ borderColor: \"darkturquoise\" }}\n          onClick={() => {\n            clearInterval(intervalID);\n            props.onSliderChange(0);\n            setIsPlaying(false)\n          }}\n        />\n      </ButtonGroup>\n    </div>\n  );\n}\n\nfunction ValueLabelComponent(props, date) {\n  const { children, open } = props;\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={date}>\n      {children}\n    </Tooltip>\n  );\n}\n\nfunction dataPlaying(onSliderChange, original_index, length) {\n  var index = original_index;\n  var intervalID = setInterval(function () {\n    if (index === length - 1) {\n      clearInterval(intervalID);\n    }\n    onSliderChange(index);\n    index++;\n  }, 100);\n  return intervalID;\n}\n","import classes from \"./App.module.css\";\nimport { useEffect, useState } from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\nimport { MenuField } from \"./components/menuField\";\nimport { GraphArea } from \"./components/graphArea\";\nimport { BottomMenuField } from \"./components/bottomMenuField\";\nimport { prefectures } from \"./metadata\";\n\nconst MAPBOX_ACCESS_TOKEN =\n  \"pk.eyJ1IjoibmF0c3Vub3RzdWt1ZGEiLCJhIjoiY2tua2l1ZzB0MGJqaDJucDNqYnd2MmVlZyJ9.n2deVJQiKF_O3D8TGX8E9Q\";\n\nfunction App() {\n  const [perDayData, setPerDayData] = useState({});\n  const [prefPolygon, setPrefPolygon] = useState({});\n  const [yyyymmdd, setYYYYMMDD] = useState(\"2021-01-10\");\n  const [dateArray, setDateArray] = useState([]);\n  const [viewState, setViewState] = useState({\n    longitude: 135,\n    latitude: 38,\n    zoom: 4.6,\n    pitch: 45,\n  });\n  const [isDisplayPolygon, setIsDisplayPolygon] = useState(true);\n  const [isDisplayArc, setIsDisplayArc] = useState(true);\n  const [isZenkoku, setIsZenkoku] = useState(true);\n  const [isPrefsPolygon, setIsPrefsPolygon] = useState(Array(47).fill(false));\n  const [isZenkokuArc, setIsZenkokuArc] = useState(true);\n  const [isPrefsArc, setIsPrefsArc] = useState(Array(47).fill(false));\n\n  //settings for deck.gl\n  const geoLayer = new GeoJsonLayer({\n    id: \"geojson-layer\",\n    data: prefPolygon,\n    wireframe: true,\n    filled: true,\n    stroked: true,\n    opacity: 1.0,\n    pickable: true,\n    extruded: true,\n    lineWidthScale: 20,\n    lineWidthMinPixels: 2,\n    getFillColor: (f) => {\n      if (\n        !isZenkoku &&\n        !isPrefsPolygon[prefectures.indexOf(f.properties.name)]\n      ) {\n        return [0, 0, 0, 0];\n      }\n      return [\n        perDayData[yyyymmdd][f.properties.name][\"per_day\"]/0.5,\n        122,\n        122,\n        255,\n      ];\n    },\n    getRadius: 100,\n    getLineWidth: 1,\n    getLineColor: (f) => {\n      if (\n        !isZenkoku &&\n        !isPrefsPolygon[prefectures.indexOf(f.properties.name)]\n      ) {\n        return [0, 0, 0, 0];\n      }\n      return [\n        perDayData[yyyymmdd][f.properties.name][\"per_day\"]/0.5,\n        122,\n        122,\n        255,\n      ];\n    },\n    getElevation: (f) => {\n      if (\n        !isZenkoku &&\n        !isPrefsPolygon[prefectures.indexOf(f.properties.name)]\n      ) {\n        return 0;\n      }\n      return perDayData[yyyymmdd][f.properties.name][\"per_day\"] * 200;\n    },\n    updateTriggers: {\n      getFillColor: { yyyymmdd, isPrefsPolygon, isZenkoku },\n      getLineColor: { yyyymmdd, isPrefsPolygon, isZenkoku },\n      getElevation: { yyyymmdd, isPrefsPolygon, isZenkoku },\n    },\n  });\n\n  useEffect(() => {\n    console.log(\"mounted\");\n    async function fetchData() {\n      const [dayData, dayArray] = await loadDayData();\n      console.log(dayArray);\n      setPerDayData(dayData);\n      setDateArray(dayArray);\n      setYYYYMMDD(dayArray[0]);\n\n      const polygonData = await loadPrefPolygon();\n      setPrefPolygon(polygonData);\n    }\n    fetchData();\n    return () => console.log(\"unmounting...\");\n  }, []);\n  return (\n    <div className={classes.App}>\n      <div className={classes.header}>\n        <div className={classes.title}>\n          新型コロナウイルスデータ可視化サイト\n        </div>\n        <a\n          className={classes.detail}\n          href={\"https://github.com/tktkbohshi/cov19_map_vis\"}\n        >\n          レポジトリ（リンク）\n        </a>\n        <div className={classes.update}>update at 2021.4.24</div>\n      </div>\n      <div className={classes.mapContainer}>\n        <DeckGL\n          layers={[geoLayer]}\n          initialViewState={viewState}\n          controller={true}\n        >\n          <StaticMap\n            mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n            mapStyle=\"mapbox://styles/natsunotsukuda/cknluz9sx1ovb17pd5et6hg4y\"\n          />\n        </DeckGL>\n        <MenuField\n          isZenkoku={isZenkoku}\n          isZenkokuArc={isZenkokuArc}\n          isPrefsPolygon={isPrefsPolygon}\n          isPrefsArc={isPrefsArc}\n          setIsDisplayPlygon={isDisplayPolygon}\n          isDiplayArc={isDisplayArc}\n          setIsPrefsPolygon={(v) => setIsPrefsPolygon(v)}\n          setIsPrefsArc={(v) => setIsPrefsArc(v)}\n          setIsDisplayPolygon={(v) => setIsDisplayPolygon(v)}\n          setIsDisplayArc={(v) => setIsDisplayArc(v)}\n          onIsZenkokuChange={(v) => setIsZenkoku(v)}\n          onIsZenkokuArcChange={(v) => setIsZenkokuArc(v)}\n        />\n        <BottomMenuField\n          defaultValue={dateArray.length - 1}\n          date={yyyymmdd}\n          original_index={dateArray.indexOf(yyyymmdd)}\n          date_length={dateArray.length}\n          onSliderChange={(v) => {\n            setYYYYMMDD(dateArray[v]);\n            console.log(\"slider change\");\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nasync function loadDayData() {\n  const jsonData = await fetch(\"jsonData/newCovid19JapanAll.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  })\n    .then((res) => res.json())\n    .then((resJson) => {\n      return resJson;\n    });\n  return [jsonData, Object.keys(jsonData)];\n}\n\nasync function loadPrefPolygon() {\n  const jsonData = await fetch(\"jsonData/prefectures.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  })\n    .then((res) => res.json())\n    .then((resJson) => {\n      const polyData = resJson[\"features\"];\n      return polyData;\n    });\n  return { type: \"FeatureCollection\", features: jsonData };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"menuField_field__3soiD\",\"column\":\"menuField_column__35OH_\",\"selectPref\":\"menuField_selectPref__21qgJ\",\"prefCheckbox\":\"menuField_prefCheckbox__1_vl6\",\"columnTitle\":\"menuField_columnTitle__1L0QN\",\"checkIsDisplaying\":\"menuField_checkIsDisplaying__PZu2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomMenuField\":\"bottomMenuField_bottomMenuField__1-lF_\",\"slider\":\"bottomMenuField_slider__1Plzk\",\"group\":\"bottomMenuField_group__24kj5\",\"button\":\"bottomMenuField_button__1ZSxZ\",\"icon\":\"bottomMenuField_icon__1oQC0\"};"],"sourceRoot":""}